// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Sends an email to the address passed in with a verification code to verify their email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send a register Verification Code",
                "parameters": [
                    {
                        "description": "Email address to send code to",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.PostAuths.AuthEmailInputStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Expiry time of code",
                        "schema": {
                            "$ref": "#/definitions/routes.PostAuths.AuthEmailOutputStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/authGen": {
            "post": {
                "description": "Sends an email to the address passed in with a verification code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send a general Verification Code",
                "parameters": [
                    {
                        "description": "Email address to send code to",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.PostAuthsGen.AuthGenInputStruct"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Expiry time of code",
                        "schema": {
                            "$ref": "#/definitions/routes.PostAuthsGen.AuthGenOutputStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/session": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login to an account",
                "parameters": [
                    {
                        "description": "login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.Login.LoginInputStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "string username",
                        "schema": {
                            "$ref": "#/definitions/routes.Login.LoginOutputStruct"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Just deletes the cookie the user was using to login",
                "tags": [
                    "Auth"
                ],
                "summary": "Logs user out of account",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Searchs for Users with input data from DDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Searchs for a User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username query",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "String Array of Usernames",
                        "schema": {
                            "$ref": "#/definitions/routes.SearchUser.SearchUsersOutputStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Registers the user with input data to DDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Registers a User",
                "parameters": [
                    {
                        "description": "User Data and code from email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterUser.RegisterInputStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/captures": {
            "get": {
                "description": "Gets all captures from DDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Captures"
                ],
                "summary": "Gets captures from all Users",
                "responses": {
                    "201": {
                        "description": "List of all mushrooms",
                        "schema": {
                            "$ref": "#/definitions/routes.GetAllCaptures.GetAllCapturesOutputStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{UserID}": {
            "get": {
                "description": "Gets one user with input data from DDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user ID",
                        "name": "UserID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "string username",
                        "schema": {
                            "$ref": "#/definitions/routes.GetUser.GetUserOutputStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Updates a User with input data to DDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Updates a User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user ID",
                        "name": "UserID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Deletes a User with input data from DDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Deletes a User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user ID",
                        "name": "UserID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{UserID}/captures": {
            "get": {
                "description": "Gets a list of captures from a User with input data from DDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Captures"
                ],
                "summary": "Gets a list of captures from a User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user ID",
                        "name": "UserID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "string username",
                        "schema": {
                            "$ref": "#/definitions/routes.GetCapturesList.GetCapturesListOutputStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Gets a list of mushrooms to add as captures to the user journal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Captures"
                ],
                "summary": "Add a new list of captures to the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user ID",
                        "name": "UserID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "info to add and update the capture with. Will NOT overwrite notes if notes already exist. Instances will append",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.AddCaptures.AddCapturesInputStruct"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{UserID}/captures/{CaptureID}": {
            "get": {
                "description": "Gets all relevant information about a mushroom that's been captured for a user, including image links",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Captures"
                ],
                "summary": "Get information about a captured mushroom",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the user ID",
                        "name": "UserID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the capture ID",
                        "name": "CaptureID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "mushroom information",
                        "schema": {
                            "$ref": "#/definitions/routes.GetCapture.GetCaptureOutputStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{UserID}/images": {
            "post": {
                "description": "USED FOR CAPTURE UPLOAD. MAKE REQUEST HERE TO GET S3 KEY, THEN INCLUDE S3KEY IN ADDCAPTURES REQUEST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Captures"
                ],
                "summary": "Uploads an image for the user to S3, FOR CAPTURE UPLOAD",
                "parameters": [
                    {
                        "type": "number",
                        "description": "number of image upload links / S3 keys to generate. Default is 1",
                        "name": "numLinks",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the user ID",
                        "name": "UserID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Capture": {
            "type": "object",
            "properties": {
                "captureID": {
                    "type": "string"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Instance"
                    }
                },
                "mainSort": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "timesFound": {
                    "type": "integer"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "models.Instance": {
            "type": "object",
            "properties": {
                "dateFound": {
                    "type": "string"
                },
                "imageLink": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "location": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "s3Key": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "TotalCaptures": {
                    "type": "integer"
                },
                "color1": {
                    "type": "string"
                },
                "color2": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "follows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mainSort": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "routes.AddCaptures.AddCapturesInputStruct": {
            "type": "object",
            "properties": {
                "captures": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "captureID": {
                                "type": "string"
                            },
                            "instances": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Instance"
                                }
                            },
                            "notes": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "routes.GetAllCaptures.GetAllCapturesOutputStruct": {
            "type": "object",
            "properties": {
                "capture": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Capture"
                    }
                }
            }
        },
        "routes.GetCapture.GetCaptureOutputStruct": {
            "type": "object",
            "properties": {
                "capture": {
                    "$ref": "#/definitions/models.Capture"
                }
            }
        },
        "routes.GetCapturesList.GetCapturesListOutputStruct": {
            "type": "object",
            "properties": {
                "captures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Capture"
                    }
                }
            }
        },
        "routes.GetUser.GetUserOutputStruct": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "routes.Login.LoginInputStruct": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "routes.Login.LoginOutputStruct": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "routes.PostAuths.AuthEmailInputStruct": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "routes.PostAuths.AuthEmailOutputStruct": {
            "type": "object",
            "properties": {
                "codeExpiry": {
                    "type": "string"
                }
            }
        },
        "routes.PostAuthsGen.AuthGenInputStruct": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "routes.PostAuthsGen.AuthGenOutputStruct": {
            "type": "object",
            "properties": {
                "codeExpiry": {
                    "type": "string"
                }
            }
        },
        "routes.RegisterUser.RegisterInputStruct": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "routes.SearchUser.SearchUsersOutputStruct": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Polyamanita API",
	Description:      "API for Polyamanita server functions",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
